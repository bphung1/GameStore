@model GameStore.WebUI.Models.GameOrderViewModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>GameOrderViewModel</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.OrderID)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.OrderID)
        </dd>
        <dt class="col-sm-2">
            Name
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Customer.FirstName)
            @Html.DisplayFor(model => model.Customer.LastName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.StoreId)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.StoreLocation.StoreName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.OrderTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.OrderTime)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Game.GameName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Game.GameName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Quantity)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Quantity)
        </dd>
    </dl>
</div>
<div>
    <a asp-controller="Customer" asp-action="Index">Back to List</a>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}